const truffleAssert = require('truffle-assertions');

// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    
    // Declare few constants and assign a few sample accounts generated by ganache-cli        
    const ownerID = accounts[0]
    const originOrganizerID = accounts[1]
    const originOrganizerName = "Metal music concerts Inc."
    const originOrganizerInformation = "Rock and metal music concerts organizer around the world."    
    const productNotes = "Ticket for Metallica music concert"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0    
    const attendeeID = accounts[2]
    const validatorID = accounts[3]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    const organizedEventID = 1;
    const upc = 1;

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Organizer: accounts[1] ", accounts[1])
    console.log("Attendee: accounts[2] ", accounts[2])
    console.log("Validator: accounts[3] ", accounts[3])    

    // 1st Test
    it("Testing smart contract function createTicket() and createOrganizedEvent() and  that allows a organizer to create an organized event and a ticket", async () => {
        
        const supplyChain = await SupplyChain.deployed()
   
        // Create an organized event
        await supplyChain.createOrganizedEvent(originOrganizerID, originOrganizerName, originOrganizerInformation).then((result) => {

            truffleAssert.eventEmitted(result, 'OrganizedEventCreated', (ev) => {                
                return ev.organizedEventId.toNumber() == organizedEventID;
            }, 'OrganizedEventCreated should be emitted with correct parameters');
        })

        // Get the recent created organized event
        const resultOrganizedEvent = await supplyChain.fetchOrganizedEvent(organizedEventID)

        // Verify the returned values
        assert.equal(resultOrganizedEvent[1], originOrganizerID, 'Error: Missing or Invalid originOrganizerID')
        assert.equal(resultOrganizedEvent[2], originOrganizerName, 'Error: Missing or Invalid originOrganizerName')
        assert.equal(resultOrganizedEvent[3], originOrganizerInformation, 'Error: Missing or Invalid originOrganizerInformation')            
        
        // Mark a ticket as Created by calling function createTicket()
        await supplyChain.createTicket(originOrganizerID, organizedEventID, productNotes, productPrice).then((result) => {

            truffleAssert.eventEmitted(result, 'TicketCreated', (ev) => {                
                return ev.upc.toNumber() == upc;
            }, 'TicketCreated should be emitted with correct parameters');
        })   
        
        // Retrieve the just now saved ticket from blockchain by calling function fetchTicket()
        const resultTicket = await supplyChain.fetchTicket.call(upc)        

        // Verify the returned values              
        assert.equal(resultTicket[1], originOrganizerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultTicket[2].toNumber(), organizedEventID, 'Error: Missing or Invalid organizedEventID')
        assert.equal(resultTicket[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultTicket[4].toNumber(), productPrice, 'Error: Missing or Invalid productPrice')        
        assert.equal(resultTicket[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')                
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Processed()
        

        // Mark an item as Processed by calling function processtItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Packed()
        

        // Mark an item as Packed by calling function packItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event ForSale()
        

        // Mark an item as ForSale by calling function sellItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Shipped()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Received()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Purchased()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

});

